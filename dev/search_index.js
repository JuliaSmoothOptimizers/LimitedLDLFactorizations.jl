var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [LimitedLDLFactorizations]","category":"page"},{"location":"reference/#LimitedLDLFactorizations.LimitedLDLFactorizations","page":"Reference","title":"LimitedLDLFactorizations.LimitedLDLFactorizations","text":"A Pure Julia Version of limited-memory LDLᵀ factorization. A left-looking implementation of the sparse LDLᵀ factorization of a symmetric matrix with the possibility to compute a limited-memory incomplete factorization.\n\nDominique Orban <dominique.orban@gmail.com> Montreal, April 2015, December 2015, July 2017.\n\nThis code is strongly inspired by Lin and Moré's ICFS [1,2]. The modified version is described in [3,4].\n\nReferences\n\n[1] C.-J. Lin and J. J. Moré. Incomplete Cholesky factorizations with limited     memory. SIAM Journal on Scientific Computing, 21(1):24–45, 1999. [2] http://www.mcs.anl.gov/~more/icfs [3] D. Orban. Limited-Memory LDLᵀ Factorization of Symmetric Quasi-Definite     Matrices with Application to Constrained Optimization. Numerical Algorithms     70(1):9–41, 2015. DOI 10.1007/s11075-014-9933-x [4] https://github.com/optimizers/lldl\n\n\n\n\n\n","category":"module"},{"location":"reference/#LimitedLDLFactorizations.LimitedLDLFactorization-Union{Tuple{Tf}, Tuple{Ti}, Tuple{Tv}, Tuple{SparseArrays.SparseMatrixCSC{Tv, Ti}, Type{Tf}}} where {Tv<:Number, Ti<:Integer, Tf<:Real}","page":"Reference","title":"LimitedLDLFactorizations.LimitedLDLFactorization","text":"LLDL = LimitedLDLFactorization(T; P = amd(T), memory = 0, α = 0, α_increase_factor = 10)\nLLDL = LimitedLDLFactorization(T, ::Type{Tf}; P = amd(T), memory = 0, α = 0, α_increase_factor = 10)\n\nPerform the allocations for the LLDL factorization of symmetric matrix whose lower triangle is T  with the permutation vector P.\n\nArguments\n\nT::SparseMatrixCSC{Tv,Ti}: lower triangle of the matrix to factorize;\n::Type{Tf}: type used for the factorization, by default the type of the elements of A.\n\nKeyword arguments\n\nP::AbstractVector{<:Integer} = amd(T): permutation vector;\nmemory::Int=0: extra amount of memory to allocate for the incomplete factor L.                  The total memory allocated is nnz(T) + n * memory, where                  T is the strict lower triangle of A and n is the size of A;\nα::Number=0: initial value of the shift in case the incomplete LDLᵀ                factorization of A is found to not exist. The shift will be                gradually increased from this initial value until success;\nα_increase_factor::Number=10: value by which the shift will be increased after                                  the incomplete LDLᵀ factorization of T is found                                 to not exist.\n\nExample\n\nA = sprand(Float64, 10, 10, 0.2)\nT = tril(A * A' + I)\nLLDL = LimitedLDLFactorization(T) # Float64 factorization\nLLDL = LimitedLDLFactorization(T, Float32) # Float32 factorization\n\n\n\n\n\n","category":"method"},{"location":"reference/#LimitedLDLFactorizations.abspermute!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{Vector{Tv}, AbstractVector{Ti}, Ti}} where {Tv<:Number, Ti<:Integer}","page":"Reference","title":"LimitedLDLFactorizations.abspermute!","text":"Permute the elements of keys in place so that     abs(x[keys[i]]) ≤ abs(x[keys[k]])  for i = 1, ..., k     abs(x[keys[k]]) ≤ abs(x[keys[i]])  for i = k, ..., n, where n is the length of keys. The length of x should be at least n. Only keys is modified. From the MINPACK2 function dsel2 by Kastak, Lin and Moré.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LimitedLDLFactorizations.factorized-Tuple{LimitedLDLFactorization}","page":"Reference","title":"LimitedLDLFactorizations.factorized","text":"isfact = factorized(LLDL)\n\nReturns true if the most recent factorization stored in LLDL LimitedLDLFactorization succeeded.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LimitedLDLFactorizations.lldl-Union{Tuple{Tf}, Tuple{Ti}, Tuple{Tv}, Tuple{SparseArrays.SparseMatrixCSC{Tv, Ti}, Type{Tf}}} where {Tv<:Number, Ti<:Integer, Tf<:Real}","page":"Reference","title":"LimitedLDLFactorizations.lldl","text":"lldl(A; P = amd(A), memory = 0, α = 0, droptol = 0, check_tril = true)\nlldl(A, ::Type{Tf}; P = amd(A), memory = 0, α = 0, droptol = 0, check_tril = true)\n\nCompute the limited-memory LDLᵀ factorization of A. A should be a lower triangular matrix.\n\nArguments\n\nA::SparseMatrixCSC{Tv,Ti}: matrix to factorize (its strict lower triangle and                              diagonal will be extracted);\n::Type{Tf}: type used for the factorization, by default the type of the elements of A.\n\nKeyword arguments\n\nP::AbstractVector{<:Integer} = amd(A): permutation vector.\nmemory::Int=0: extra amount of memory to allocate for the incomplete factor L.                  The total memory allocated is nnz(T) + n * memory, where                  T is the strict lower triangle of A and n is the size of A;\nα::Number=0: initial value of the shift in case the incomplete LDLᵀ                factorization of A is found to not exist. The shift will be                gradually increased from this initial value until success;\nα_increase_factor::Number = 10: value by which the shift will be increased after                                    the incomplete LDLᵀ factorization of T is found                                   to not exist.\ndroptol::Tv=Tv(0): to further sparsify L, all elements with magnitude smaller                      than droptol are dropped;\ncheck_tril::Bool = true: check if A is a lower triangular matrix.\n\nExample\n\nA = sprand(Float64, 10, 10, 0.2)\nAs = A * A' + I\nLLDL = lldl(As) # lower triangle is extracted\nT = tril(As)\nLLDL = lldl(T) # Float64 factorization\nLLDL = lldl(T, Float32) # Float32 factorization\n\n\n\n\n\n","category":"method"},{"location":"reference/#LimitedLDLFactorizations.lldl_factorize!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{Tf}, Tuple{LimitedLDLFactorization{Tf, Ti}, SparseArrays.SparseMatrixCSC{Tv, Ti}}} where {Tf<:Number, Tv<:Number, Ti<:Integer}","page":"Reference","title":"LimitedLDLFactorizations.lldl_factorize!","text":"lldl_factorize!(S, T; droptol = 0.0)\n\nPerform the in-place factorization of a symmetric matrix whose lower triangle is T  with the permutation vector.\n\nArguments\n\nS::LimitedLDLFactorization{Tf, Ti};\nT::SparseMatrixCSC{Tv,Ti}: lower triangle of the matrix to factorize.\n\nT should keep the same nonzero pattern and the sign of its diagonal elements.\n\nKeyword arguments\n\ndroptol::Tf=Tf(0): to further sparsify L, all elements with magnitude smaller                      than droptol are dropped.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LimitedLDLFactorizations.update_shift!-Union{Tuple{T}, Tuple{LimitedLDLFactorization{T}, T}} where T<:Real","page":"Reference","title":"LimitedLDLFactorizations.update_shift!","text":"update_shift!(LLDL, α)\n\nUpdates the shift α of the LimitedLDLFactorization object LLDL.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LimitedLDLFactorizations.update_shift_increase_factor!-Union{Tuple{T}, Tuple{LimitedLDLFactorization{T}, Number}} where T<:Real","page":"Reference","title":"LimitedLDLFactorizations.update_shift_increase_factor!","text":"update_shift_increase_factor!(LLDL, α_increase_factor)\n\nUpdates the shift increase value α_increase_factor of the LimitedLDLFactorization object LLDL by which the shift α will be increased each time a attempt_lldl! fails.\n\n\n\n\n\n","category":"method"},{"location":"#LimitedLDLFactorizations.jl","page":"Home","title":"LimitedLDLFactorizations.jl","text":"","category":"section"},{"location":"tutorial/#LimitedLDLFactorizations.jl-Tutorial","page":"Tutorial","title":"LimitedLDLFactorizations.jl Tutorial","text":"","category":"section"}]
}
